{"version":3,"sources":["jquery.treehouse-badges.js"],"names":[],"mappingsfile":"jquery.treehouse-badges.js","sourcesContent":[";(function ( $, window, document, undefined ) {\n\n\t\"use strict\";\n\n\t\t// undefined is used here as the undefined global variable in ECMAScript 3 is\n\t\t// mutable (ie. it can be changed by someone else). undefined isn't really being\n\t\t// passed in so we can ensure the value of it is truly undefined. In ES5, undefined\n\t\t// can no longer be modified.\n\n\t\t// window and document are passed through as local variable rather than global\n\t\t// as this (slightly) quickens the resolution process and can be more efficiently\n\t\t// minified (especially when both are regularly referenced in your plugin).\n\n\t\t// Create the defaults once\n\t\tvar pluginName = \"treehouseBadges\",\n\t\t\t\tdefaults = {\n\t\t\t\tusername: false,\n\t\t\t\treverse: false,\n\t\t\t\tsortBadgesBy: 'course'\n\t\t};\n\n\t\t// The actual plugin constructor\n\t\tfunction Plugin ( element, options ) {\n\t\t\t\tthis.element = element;\n\t\t\t\tthis.settings = $.extend( {}, defaults, options );\n\t\t\t\tthis._defaults = defaults;\n\t\t\t\tthis._name = pluginName;\n\t\t\t\tthis.init();\n\t\t}\n\n\t\t// Avoid Plugin.prototype conflicts\n\t\t$.extend(Plugin.prototype, {\n\t\t\t\n\t\t\tinit: function () {\n\n\t\t\t\t\tthis.displayBadges();\n\t\t\t},\n\n\t\t\tsortBy: function(field, reverse, primer) {\n\n\t\t\t\tvar key = primer ?\n\t\t\t\t\tfunction(x) {\n\t\t\t\t\t\treturn primer(x[field]);\n\t\t\t\t\t} :\n\t\t\t\t\tfunction(x) {\n\t\t\t\t\t\treturn x[field];\n\t\t\t\t\t};\n\n\t\t\t\treverse = !reverse ? 1 : -1;\n\n\t\t\t\treturn function(a, b) {\n\t\t\t\t\treturn a = key(a), b = key(b), reverse * ((a > b) - (b > a));\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t/** @function getCourseTitleFromBadge\n\t\t\t * Returns the course title from the badge. Used for badge sorting.\n\t\t\t * @param {object} badge - The current badge gets passed through.\n\t\t\t */\n\t\t\tgetCourseTitleFromBadge: function(badge) {\n\t\t\t\t\treturn badge.courses[0].title.toLowerCase();\n\t\t\t},\n\n\n\t\t\t/** @function sortBadges\n\t\t \t * Sorts the array of Treehouse Badges that gets passed through it.\n\t\t \t * @param {array} badgesArray - An array of Treehouse Badge objects.\n\t\t \t * @param {string} sortBadgesBy - Valid options: 'course', 'id', or 'date'.\n\t\t \t * @param {boolean} reverseOrder - Default\n\t\t \t */\n\t\t\tsortBadges: function(badgesArray, sortBadgesBy, reverse) {\n\t\t\t\tvar badges = badgesArray;\n\t\t\t\tvar _this = this;\n\n\t\t\t\t/* Sort badges by course */\n\t\t\t\tif (sortBadgesBy === 'course') {\n\t\t\t\t\t\n\t\t\t\t\tbadges.sort(function(a, b) {\n\t\t\t\t\t\tif (_this.getCourseTitleFromBadge(a) < _this.getCourseTitleFromBadge(b)) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t} else if (_this.getCourseTitleFromBadge(a) > _this.getCourseTitleFromBadge(b)) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t} else if (sortBadgesBy === 'id') {\n\n\t\t\t\t\t// SORT BADGES BY ID\n\t\t\t\t\tbadges.sort(this.sortBy('id', false, parseInt));\n\n\t\t\t\t} else if (sortBadgesBy === 'date') {\n\t\t\t\t\t// DO NOTHING\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Invalid sort method. Use course, date, or id');\n\t\t\t\t}\n\n\t\t\t\tif (reverse === true) {\n\t\t\t\t\tbadges.reverse();\n\t\t\t\t}\n\n\t\t\t\treturn badges;\n\t\t\t},\n\n\t\t\tdisplayBadges: function() {\n\t\t\t\tvar _this = this;\n\t\t\t\tvar s = this.settings;\n\t\t\t\tvar appendElement = this.element;\n\t\t\t\tvar badgesArray = [];\n\t\t\t\tvar $badgesContainer = $('<div class=\"badges\"></div>');\n\t\t\t\tvar jsonURL = 'http://teamtreehouse.com/' + s.username + '.json';\n\t\t\t\tvar reverse = s.reverse;\n\t\t\t\tvar badgeSort = s.sortBadgesBy;\n\t\t\t\tvar $badge;\n\n\t\t\t\tif (s.username === false) {\n\t\t\t\t\tconsole.log('Treehouse Badges Error: No username set in the options.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// GET THE JSON FROM TREEHOUSE\n\t\t\t\t$.getJSON(jsonURL, function(data) {\n\n\t\t\t\t\t// INITIALIZE BADGE VARIABLES\n\t\t\t\t\tvar fullName = data.name;\n\t\t\t\t\tbadgesArray = data.badges;\n\t\t\t\t\tvar badgeName,\n\t\t\t\t\t\tbadgeCourse,\n\t\t\t\t\t\tbadgeIcon;\n\n\t\t\t\t\t$(appendElement).first().append($badgesContainer);\n\t\t\t\t\t$(appendElement).first().prepend('<div class=\"badges__header\"><h1>' + fullName + '\\'s Team Treehouse Badges</h1></div>');\n\n\t\t\t\t\t// DELETE BADGES THAT HAVE NO COURSE ATTACHED TO THEM \n\t\t\t\t\t// THE NEWBIE BADGE IS THE ONLY ONE TO MY KNOWLEDGE\n\t\t\t\t\tbadgesArray = badgesArray.filter(function(badge){\n\t\t\t\t\t\treturn badge.courses.length !== 0;\n\t\t\t\t\t});\n\n\t\t\t\t\t// SORT BADGES\n\t\t\t\t\tbadgesArray = _this.sortBadges(badgesArray, badgeSort, reverse);\n\n\t\t\t\t\tfor (var i = 0; i < badgesArray.length; i++) {\n\t\t\t\t\t\tvar thisBadge = badgesArray[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\t// GRAB THE FIRST COURSE'S NAME AND SET THE HTML TO APPEND TO PAGE\n\t\t\t\t\t\tbadgeCourse = '<h3>' + thisBadge.courses[0].title + '</h3>';\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t// STORE THE REST OF THE HTML TO APPEND TO THE BODY\n\t\t\t\t\t\tbadgeName = '<h2><a href=\"' + thisBadge.url + '\">' + thisBadge.name + '</a></h2>';\n\t\t\t\t\t\tbadgeIcon = '<img src=\"' + thisBadge.icon_url + '\" alt=\"\" />';\n\t\t\t\t\t\t$badge = $('<div class=\"badges__badge\"><div class=\"badge__inner\">' + badgeIcon + badgeName + badgeCourse + '</div></div>');\n\n\t\t\t\t\t\t// APPEND THIS BADGE TO THE PAGE CONTAINER\n\t\t\t\t\t\t$badgesContainer.append($badge);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\n\t\t});\n\n\t\t// A REALLY LIGHTWEIGHT PLUGIN WRAPPER AROUND THE CONSTRUCTOR,\n\t\t// PREVENTING AGAINST MULTIPLE INSTANTIATIONS\n\t\t$.fn[ pluginName ] = function ( options ) {\n\t\t\t\treturn this.each(function() {\n\t\t\t\t\t\tif ( !$.data( this, \"plugin_\" + pluginName ) ) {\n\t\t\t\t\t\t\t\t$.data( this, \"plugin_\" + pluginName, new Plugin( this, options ) );\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t};\n\n})( jQuery, window, document );\n"],"sourceRoot":"/source/"}